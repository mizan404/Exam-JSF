'use strict';

(function () {
  var script = document.createElement('script');
  document.getElementById('bot-root').prepend(script);
  script.onload = function () {
    var script1 = document.createElement('script');
    document.getElementById('bot-root').prepend(script1);
    script1.onload = function () {
      var firebaseConfig = {
        apiKey: 'AIzaSyBk2PTeIUpBL6BcdSDjDazqN7LIwlkEli0',
        authDomain: 'testing-app-a31aa.firebaseapp.com',
        databaseURL: 'https://testing-app-a31aa.firebaseio.com',
        projectId: 'testing-app-a31aa',
        storageBucket: 'testing-app-a31aa.appspot.com',
        messagingSenderId: '58373683969',
        appId: '1:58373683969:web:55acf366571fa1b13db900',
        measurementId: 'G-1EBT6PJRNM'
      };
      // eslint-disable-next-line no-undef
      var firebase1 = firebase.initializeApp(firebaseConfig);
      var messaging = firebase1.messaging();
      messaging.usePublicVapidKey('BHrXHe4056LlLSHSBPNd_ClLXWbvteEmKkcgIFEReEM22L085ElwsxQE3r5HUBkRJ7dKeD7p1YuVYHuJzOLMyFA');

      function isTokenSentToServer() {
        return window.localStorage.getItem('sentToServer') === '1';
      }

      function setTokenSentToServer(sent) {
        window.localStorage.setItem('sentToServer', sent ? '1' : '0');
      }

      function sendTokenToServer(currentToken) {
        if (!isTokenSentToServer()) {
          console.log('Sending token to server...');
          setTokenSentToServer(true);
          var origin = window.location.origin;
          var data = { currentToken: currentToken, origin: origin };
          var xhttp = new XMLHttpRequest();
          xhttp.open('POST', 'https://app.pushbrothers.com/sendFirebaseToken', true);
          xhttp.setRequestHeader('Content-type', 'application/json');
          xhttp.send(JSON.stringify(data)); // Make sure to stringify
          //xhttp.responseType = 'json';
          xhttp.onload = function () {
            console.log('http response', xhttp.responseText);
          };
          xhttp.onError = function () {
            console.log('http response', xhttp.error);
          };
        } else {
          console.log('Token already sent to server so won\'t send it again ' + 'unless it changes');
        }
      }
      navigator.serviceWorker.register('/web-push-sw.js').then(function (registration) {
        messaging.useServiceWorker(registration);
        console.log('registration', registration);
        Notification.requestPermission().then(function (permission) {
          console.log('Notification permission granted.');
          if (permission === 'granted') {
            if (!isTokenSentToServer()) {
              messaging.getToken().then(function (currentToken) {
                messaging.deleteToken(currentToken).then(function () {
                  console.log('Token deleted.');
                  setTokenSentToServer(false);
                  messaging.getToken().then(function (currentToken) {
                    if (currentToken) {
                      console.log(currentToken);
                      //messaging.deleteToken(currentToken).then(() => {
                      sendTokenToServer(currentToken);
                      //updateUIForPushEnabled(currentToken);
                      /* }).catch((err) => {
                        console.log('Unable to delete token. ', err);
                      });*/
                    } else {
                      console.log('No Instance ID token available. Request permission to generate one.');
                    }
                  }).catch(function (err) {
                    console.log('An error occurred while retrieving token. ', err);
                  });
                }).catch(function (err) {
                  console.log('Unable to delete token. ', err);
                });
              });
            } else {
              messaging.getToken().then(function (currentToken) {
                if (currentToken) {
                  console.log(currentToken);
                  //messaging.deleteToken(currentToken).then(() => {
                  sendTokenToServer(currentToken);
                  //updateUIForPushEnabled(currentToken);
                  /* }).catch((err) => {
                    console.log('Unable to delete token. ', err);
                  });*/
                } else {
                  console.log('No Instance ID token available. Request permission to generate one.');
                }
              }).catch(function (err) {
                console.log('An error occurred while retrieving token. ', err);
              });
            }
          }
        }).catch(function (err) {
          console.log('Unable to get permission to notify. ', err);
        });
      });
      // Callback fired if Instance ID token is updated.
      messaging.onTokenRefresh(function () {
        messaging.getToken().then(function (refreshedToken) {
          console.log('Token refreshed.');
          // Indicate that the new Instance ID token has not yet been sent to the
          // app server.
          setTokenSentToServer(false);
          // Send Instance ID token to app server.
          sendTokenToServer(refreshedToken);
          // ...
        }).catch(function (err) {
          console.log('Unable to retrieve refreshed token ', err);
          //showToken('Unable to retrieve refreshed token ', err);
        });
      });
      messaging.onMessage(function (payload) {
        console.log('Message received. ', payload);
        var notificationTitle = payload.notification.title;
        var notificationOptions = {
          icon: payload.notification.icon,
          body: payload.notification.body
        };
        // return self.registration.showNotification(notificationTitle,notificationOptions);
        new Notification(notificationTitle, notificationOptions);
      });

      function deleteToken() {
        // Delete Instance ID token.
        // [START delete_token]
        messaging.getToken().then(function (currentToken) {
          messaging.deleteToken(currentToken).then(function () {
            console.log('Token deleted.');
            setTokenSentToServer(false);
            // [START_EXCLUDE]
            // Once token is deleted update UI.

            // [END_EXCLUDE]
          }).catch(function (err) {
            console.log('Unable to delete token. ', err);
          });
          // [END delete_token]
        }).catch(function (err) {
          console.log('Error retrieving Instance ID token. ', err);
        });
      }
    };
    script1.src = 'https://www.gstatic.com/firebasejs/7.15.0/firebase-messaging.js';
  };
  script.src = 'https://www.gstatic.com/firebasejs/7.15.0/firebase-app.js';
})();
